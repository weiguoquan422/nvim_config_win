!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<A-left>	.\init.vim	/^nmap <A-left> <Esc>:bp<CR>$/;"	m
<A-right>	.\init.vim	/^nmap <A-right> <Esc>:bn<CR>$/;"	m
<C-j>	.\init.vim	/^imap <C-j> <Plug>(coc-snippets-expand-jump)$/;"	m
<F2>	.\init.vim	/^nmap <F2> :TagbarToggle<CR>$/;"	m
<F3>	.\init.vim	/^nmap <F3> :NERDTreeToggle<CR>$/;"	m
<Leader>bd	.\init.vim	/^nmap <Leader>bd <Esc>:bd<CR>$/;"	m
<Leader>bl	.\init.vim	/^nmap <Leader>bl :CocList bookmark<CR>$/;"	m
<Leader>bt	.\init.vim	/^nmap <Leader>bt <Plug>(coc-bookmark-toggle)$/;"	m
<Leader>p	.\init.vim	/^nmap <Leader>p "+p$/;"	m
<Leader>p	.\init.vim	/^vmap <Leader>p "+p$/;"	m
<Leader>wd	.\init.vim	/^nmap <Leader>wd <Esc>:q<CR>$/;"	m
<Leader>wh	.\init.vim	/^nnoremap <Leader>wh <C-W>h$/;"	m
<Leader>wj	.\init.vim	/^nnoremap <Leader>wj <C-W>j$/;"	m
<Leader>wk	.\init.vim	/^nnoremap <Leader>wk <C-W>k$/;"	m
<Leader>wl	.\init.vim	/^nnoremap <Leader>wl <C-W>l$/;"	m
<Leader>wv	.\init.vim	/^nmap <Leader>wv <Esc>:vs<CR>$/;"	m
<Leader>y	.\init.vim	/^nmap <Leader>y "+y :let @*=@+<CR>h$/;"	m
<Leader>y	.\init.vim	/^vmap <Leader>y "+y :let @*=@+<CR>h$/;"	m
<S-TAB>	.\init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	.\init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<leader>ca	.\init.vim	/^nmap <leader>ca <plug>NERDCommenterAltDelims$/;"	m
<leader>cl	.\init.vim	/^nmap <leader>cl <plug>NERDCommenterToggle$/;"	m
<leader>cl	.\init.vim	/^vmap <leader>cl <plug>NERDCommenterToggle$/;"	m
<leader>gc	.\init.vim	/^nmap <leader>gc :Gina commit<CR>$/;"	m
<leader>gd	.\init.vim	/^nmap <leader>gd :Gina diff<CR>$/;"	m
<leader>gl	.\init.vim	/^nmap <leader>gl :Gina log<CR>$/;"	m
<leader>gs	.\init.vim	/^nmap <leader>gs :Gina status<CR>$/;"	m
<leader>sf	.\init.vim	/^nmap <leader>sf :CtrlPLine<CR>$/;"	m
NERDCreateDefaultMappings	.\init.vim	/^let NERDCreateDefaultMappings = 0$/;"	v
NERDTreeAutoDeleteBuffer	.\init.vim	/^let NERDTreeAutoDeleteBuffer=1$/;"	v
NERDTreeMinimalUI	.\init.vim	/^let NERDTreeMinimalUI=1$/;"	v
NERDTreeShowHidden	.\init.vim	/^let NERDTreeShowHidden=1$/;"	v
NERDTreeWinPos	.\init.vim	/^let NERDTreeWinPos="right"$/;"	v
NERDTreeWinSize	.\init.vim	/^let NERDTreeWinSize=32$/;"	v
[n	.\init.vim	/^nmap [n <Plug>(GitGutterPrevHunk)$/;"	m
]n	.\init.vim	/^nmap ]n <Plug>(GitGutterNextHunk)$/;"	m
append_ul	.\autoload\plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	.\autoload\plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	.\autoload\plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	.\autoload\plug.vim	/^function! s:assign_name()$/;"	f
assoc	.\autoload\plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
bang	.\autoload\plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	.\autoload\plug.vim	/^function! s:bar()$/;"	f
batchfile	.\autoload\plug.vim	/^  function! s:batchfile(cmd)$/;"	f
check_back_space	.\init.vim	/^function! s:check_back_space() abort$/;"	f
check_ruby	.\autoload\plug.vim	/^function! s:check_ruby()$/;"	f
checkout	.\autoload\plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	.\autoload\plug.vim	/^function! s:chsh(swap)$/;"	f
clean	.\autoload\plug.vim	/^function! s:clean(force)$/;"	f
compare_git_uri	.\autoload\plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
define_commands	.\autoload\plug.vim	/^function! s:define_commands()$/;"	f
delete	.\autoload\plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	.\autoload\plug.vim	/^function! s:delete_op(type, ...)$/;"	f
diff	.\autoload\plug.vim	/^function! s:diff()$/;"	f
dirpath	.\autoload\plug.vim	/^  function! s:dirpath(path)$/;"	f
do	.\autoload\plug.vim	/^function! s:do(pull, force, todo)$/;"	f
doautocmd	.\autoload\plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	.\autoload\plug.vim	/^function! s:dobufread(names)$/;"	f
err	.\autoload\plug.vim	/^function! s:err(msg)$/;"	f
esc	.\autoload\plug.vim	/^function! s:esc(path)$/;"	f
escrtp	.\autoload\plug.vim	/^function! s:escrtp(path)$/;"	f
extract_name	.\autoload\plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
find_name	.\autoload\plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	.\autoload\plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	.\autoload\plug.vim	/^function! s:finish_bindings()$/;"	f
format_git_log	.\autoload\plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	.\autoload\plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
g:NERDAltDelims_c	.\init.vim	/^let g:NERDAltDelims_c = 1$/;"	v
g:coc_snippet_next	.\init.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_prev	.\init.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:ctrlp_map	.\init.vim	/^let g:ctrlp_map = '<leader>ff'$/;"	v
g:ctrlp_prompt_mappings	.\init.vim	/^let g:ctrlp_prompt_mappings = {$/;"	v
g:ctrlp_user_command	.\init.vim	/^let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']$/;"	v
g:gitgutter_map_keys	.\init.vim	/^let g:gitgutter_map_keys = 0$/;"	v
g:gitgutter_max_signs	.\init.vim	/^let g:gitgutter_max_signs = 3000$/;"	v
g:gutentags_ctags_executable	.\init.vim	/^let g:gutentags_ctags_executable='C:\\ctags58\\ctags.exe'$/;"	v
g:gutentags_enabled	.\init.vim	/^let g:gutentags_enabled = 1$/;"	v
g:loaded_plug	.\autoload\plug.vim	/^let g:loaded_plug = 1$/;"	v
g:plugs_order	.\autoload\plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:python3_host_prog	.\init.vim	/^let g:python3_host_prog='C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python37\\python.EXE'$/;"	v
g:python_host_prog	.\init.vim	/^let g:python_host_prog='C:\\Python27\\python.EXE'$/;"	v
g:rainbow_active	.\init.vim	/^let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle$/;"	v
g:startify_change_to_dir	.\init.vim	/^let g:startify_change_to_dir = 0$/;"	v
g:tagbar_ctags_bin	.\init.vim	/^let g:tagbar_ctags_bin='C:\\ctags58\\ctags.exe'$/;"	v
g:templates_use_licensee	.\init.vim	/^let g:templates_use_licensee=0$/;"	v
gd	.\init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	.\init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
git_validate	.\autoload\plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	.\autoload\plug.vim	/^function! s:git_version_requirement(...)$/;"	f
glob	.\autoload\plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	.\autoload\plug.vim	/^function! s:glob_dir(path)$/;"	f
gr	.\init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	.\init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
hash_match	.\autoload\plug.vim	/^function! s:hash_match(a, b)$/;"	f
infer_properties	.\autoload\plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	.\autoload\plug.vim	/^function! s:install(force, names)$/;"	f
is_local_plug	.\autoload\plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	.\autoload\plug.vim	/^function! s:is_managed(name)$/;"	f
is_preview_window_open	.\autoload\plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	.\autoload\plug.vim	/^function! s:is_updated(dir)$/;"	f
job_abort	.\autoload\plug.vim	/^function! s:job_abort()$/;"	f
job_cb	.\autoload\plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	.\autoload\plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	.\autoload\plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
last_non_empty_line	.\autoload\plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	.\autoload\plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	.\autoload\plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lines	.\autoload\plug.vim	/^function! s:lines(msg)$/;"	f
load_plugin	.\autoload\plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	.\autoload\plug.vim	/^function! s:loaded_names()$/;"	f
lod	.\autoload\plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	.\autoload\plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	.\autoload\plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	.\autoload\plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	.\autoload\plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	.\autoload\plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	.\autoload\plug.vim	/^function! s:logpos(name)$/;"	f
lpad	.\autoload\plug.vim	/^function! s:lpad(str, len)$/;"	f
mapleader	.\init.vim	/^let mapleader=";"$/;"	v
names	.\autoload\plug.vim	/^function! s:names(...)$/;"	f
new_window	.\autoload\plug.vim	/^function! s:new_window()$/;"	f
nvim_cb	.\autoload\plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
parse_options	.\autoload\plug.vim	/^function! s:parse_options(arg)$/;"	f
path	.\autoload\plug.vim	/^  function! s:path(path)$/;"	f
plug#	.\autoload\plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	.\autoload\plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	.\autoload\plug.vim	/^function! plug#end()$/;"	f
plug#helptags	.\autoload\plug.vim	/^function! plug#helptags()$/;"	f
plug#load	.\autoload\plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	.\autoload\plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	.\autoload\plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	.\autoload\plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	.\autoload\plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	.\autoload\plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	.\autoload\plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	.\autoload\plug.vim	/^function! s:plug_window_exists()$/;"	f
prepare	.\autoload\plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	.\autoload\plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	.\autoload\plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	.\autoload\plug.vim	/^function! s:progress_opt(base)$/;"	f
reap	.\autoload\plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	.\autoload\plug.vim	/^function! s:regress_bar()$/;"	f
reload_plugins	.\autoload\plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	.\autoload\plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	.\autoload\plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	.\autoload\plug.vim	/^function! s:reorg_rtp()$/;"	f
retry	.\autoload\plug.vim	/^function! s:retry()$/;"	f
revert	.\autoload\plug.vim	/^function! s:revert()$/;"	f
rm_rf	.\autoload\plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	.\autoload\plug.vim	/^function! s:rtp(spec)$/;"	f
s:TYPE	.\autoload\plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	.\autoload\plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:cpo_save	.\autoload\plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	.\autoload\plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	.\autoload\plug.vim	/^let s:is_win = has('win32')$/;"	v
s:last_rtp	.\autoload\plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	.\autoload\plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	.\autoload\plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	.\autoload\plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	.\autoload\plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	.\autoload\plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	.\autoload\plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	.\autoload\plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:triggers	.\autoload\plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	.\autoload\plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
section	.\autoload\plug.vim	/^function! s:section(flags)$/;"	f
shellesc_cmd	.\autoload\plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	.\autoload\plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	.\autoload\plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
snapshot	.\autoload\plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	.\autoload\plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	.\autoload\plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	.\autoload\plug.vim	/^function! s:split_rtp()$/;"	f
status	.\autoload\plug.vim	/^function! s:status()$/;"	f
status_load	.\autoload\plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	.\autoload\plug.vim	/^function! s:status_update() range$/;"	f
switch_in	.\autoload\plug.vim	/^function! s:switch_in()$/;"	f
switch_out	.\autoload\plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	.\autoload\plug.vim	/^function! s:syntax()$/;"	f
system	.\autoload\plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	.\autoload\plug.vim	/^function! s:system_chomp(...)$/;"	f
tick	.\autoload\plug.vim	/^function! s:tick()$/;"	f
to_a	.\autoload\plug.vim	/^function! s:to_a(v)$/;"	f
to_s	.\autoload\plug.vim	/^function! s:to_s(v)$/;"	f
trim	.\autoload\plug.vim	/^function! s:trim(str)$/;"	f
update	.\autoload\plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	.\autoload\plug.vim	/^function! s:update_finish()$/;"	f
update_impl	.\autoload\plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	.\autoload\plug.vim	/^function! s:update_python()$/;"	f
update_ruby	.\autoload\plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	.\autoload\plug.vim	/^function! s:update_vim()$/;"	f
upgrade	.\autoload\plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	.\autoload\plug.vim	/^function! s:upgrade_specs()$/;"	f
version_requirement	.\autoload\plug.vim	/^function! s:version_requirement(val, min)$/;"	f
warn	.\autoload\plug.vim	/^function! s:warn(cmd, msg)$/;"	f
with_cd	.\autoload\plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
wrap_cmds	.\autoload\plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
